import { io } from 'socket.io-client';
import { useNotificationStore } from '../stores/notification';
import { useChatStore } from '../stores/chat';

// URL c·ªßa WebSocket API - s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu bi·∫øn m√¥i tr∆∞·ªùng kh√¥ng t·ªìn t·∫°i
const API_URL = import.meta.env.VITE_APP_API_URL || 'http://127.0.0.1:8000';
const SOCKET_URL = API_URL.replace(/^http/, 'ws');

class SocketService {
  constructor() {
    this.socket = null;
    this.connected = false;
    this.connecting = false;
    this.notificationStore = null;
  }

  // Kh·ªüi t·∫°o k·∫øt n·ªëi WebSocket
  init() {
    if (this.connecting || this.connected) return;
    this.connecting = true;

    // L·∫•y store notification
    this.notificationStore = useNotificationStore();

    try {
      // Th·ª≠ k·∫øt n·ªëi v·ªõi WebSocket API
      // C√≥ hai c√°ch ƒë·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n WebSocket, th·ª≠ c·∫£ hai ƒë·ªÉ xem c√°i n√†o ho·∫°t ƒë·ªông
      try {
        this.socket = new WebSocket(`${SOCKET_URL}/api/ws/notifications/`);
        console.log('Th·ª≠ k·∫øt n·ªëi WebSocket qua /api/ws/notifications/');
      } catch (error) {
        console.error('L·ªói k·∫øt n·ªëi ƒë∆∞·ªùng d·∫´n 1, th·ª≠ ƒë∆∞·ªùng d·∫´n 2:', error);
        this.socket = new WebSocket(`${SOCKET_URL}/ws/notifications/`);
        console.log('Th·ª≠ k·∫øt n·ªëi WebSocket qua /ws/notifications/');
      }

      // X·ª≠ l√Ω s·ª± ki·ªán k·∫øt n·ªëi th√†nh c√¥ng
      this.socket.onopen = () => {
        console.log('WebSocket connected');
        this.connected = true;
        this.connecting = false;
      };

      // X·ª≠ l√Ω s·ª± ki·ªán khi nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o
      this.socket.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          console.log('üîî Received WebSocket message:', data);
          
          // X·ª≠ l√Ω c√°c lo·∫°i message
          if (data.type === 'auth_required') {
            // Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu x√°c th·ª±c, g·ª≠i token
            const token = localStorage.getItem('token');
            if (token) {
              console.log('G·ª≠i token x√°c th·ª±c WebSocket');
              this.socket.send(JSON.stringify({
                type: 'authenticate',
                token: token
              }));
            }
          } 
          else if (data.type === 'auth_success') {
            console.log('‚úÖ WebSocket authentication successful');
          }
          else if (data.type === 'auth_fail') {
            console.error('‚ùå WebSocket authentication failed');
            this.disconnect();
          }
          else if (data.type === 'new_message' || (data.data && data.data.type === 'new_message')) {
            // L·∫•y d·ªØ li·ªáu tin nh·∫Øn ƒë√∫ng c√°ch (c√≥ th·ªÉ n·∫±m trong data.data ho·∫∑c tr·ª±c ti·∫øp trong data)
            const messageData = data.data?.type === 'new_message' ? data.data : data;
            console.log('üì© New message received via WebSocket. Original data:', data);
            console.log('üì© Extracted message data:', messageData);
            
            // L·∫•y chatStore
            const chatStore = useChatStore();
            console.log('Current chatStore state:', {
              activeConversation: chatStore.activeConversation,
              messagesCount: chatStore.messages.length,
              userInfo: chatStore.userInfo
            });
            
            // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng tin nh·∫Øn ch∆∞a ƒë·ªçc
            chatStore.fetchUnreadMessages();
            
            // T·∫°o ƒë·ªëi t∆∞·ª£ng tin nh·∫Øn t·ª´ d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
            const newMessage = {
              id: parseInt(messageData.message_id, 10),
              sender: parseInt(messageData.sender_id, 10),
              recipient: parseInt(messageData.recipient_id, 10),
              content: messageData.content,
              is_read: messageData.is_read || false,
              created_at: messageData.created_at || new Date().toISOString()
            };
            
            console.log('üí¨ Tin nh·∫Øn m·ªõi ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi:', newMessage);
            
            // X√°c ƒë·ªãnh ng∆∞·ªùi d√πng hi·ªán t·∫°i
            const currentUserId = chatStore.userInfo?.user_id;
            
            // ƒê·∫£m b·∫£o r·∫±ng ng∆∞·ªùi g·ª≠i ho·∫∑c ng∆∞·ªùi nh·∫≠n t∆∞∆°ng ·ª©ng v·ªõi ID cu·ªôc tr√≤ chuy·ªán ƒëang m·ªü
            const otherPartyId = currentUserId === newMessage.sender 
                                ? newMessage.recipient 
                                : newMessage.sender;
            
            console.log('ID c·ªßa b√™n c√≤n l·∫°i trong cu·ªôc tr√≤ chuy·ªán:', otherPartyId);
            console.log('So s√°nh v·ªõi ID cu·ªôc tr√≤ chuy·ªán ƒëang m·ªü:', chatStore.activeConversation);
            
            // Th√™m tin nh·∫Øn m·ªõi v√†o store - b·∫•t k·ªÉ tin nh·∫Øn c·ªßa ai
            const result = chatStore.addMessage(newMessage);
            console.log('K·∫øt qu·∫£ th√™m tin nh·∫Øn:', result);
            
            // Ki·ªÉm tra n·∫øu cu·ªôc tr√≤ chuy·ªán n√†y ƒëang m·ªü
            const isActiveConversation = chatStore.activeConversation === otherPartyId;
            console.log('ƒê√¢y c√≥ ph·∫£i l√† cu·ªôc tr√≤ chuy·ªán ƒëang m·ªü kh√¥ng?', isActiveConversation);
            
            if (isActiveConversation) {
              console.log('‚úÖ ƒê√¢y l√† cu·ªôc tr√≤ chuy·ªán ƒëang m·ªü, ƒë√°nh d·∫•u l√† ƒë√£ ƒë·ªçc');
              
              // N·∫øu ng∆∞·ªùi d√πng hi·ªán t·∫°i l√† ng∆∞·ªùi nh·∫≠n, ƒë√°nh d·∫•u tin nh·∫Øn l√† ƒë√£ ƒë·ªçc
              if (currentUserId === newMessage.recipient) {
                console.log('üëÅÔ∏è Ng∆∞·ªùi d√πng hi·ªán t·∫°i l√† ng∆∞·ªùi nh·∫≠n, ƒë√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc');
                chatStore.markMessageAsRead(newMessage.id);
              }
            } else {
              console.log('‚ùå ƒê√¢y kh√¥ng ph·∫£i cu·ªôc tr√≤ chuy·ªán ƒëang m·ªü');
              
              // C·∫≠p nh·∫≠t danh s√°ch cu·ªôc tr√≤ chuy·ªán
              chatStore.updateConversation(newMessage.sender, newMessage.recipient);
              
              // ƒê∆∞a cu·ªôc tr√≤ chuy·ªán l√™n ƒë·∫ßu
              chatStore.sortConversationToTop(newMessage);
            }
            
            // Hi·ªÉn th·ªã th√¥ng b√°o m·ªõi (ch·ªâ khi l√† ng∆∞·ªùi nh·∫≠n tin nh·∫Øn)
            if (currentUserId === newMessage.recipient) {
              this.notificationStore.showNewMessageNotification(messageData);
            }
          }
          else {
            // N·∫øu l√† th√¥ng b√°o notification, c·∫≠p nh·∫≠t UI
            console.log('üîî Regular notification received');
            
            // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
            this.notificationStore.fetchUnreadCount();
            
            // N·∫øu dropdown ƒëang kh√¥ng m·ªü, t·∫£i tr∆∞·ªõc danh s√°ch th√¥ng b√°o
            if (!this.notificationStore.isDropdownOpen) {
              this.notificationStore.fetchNotifications(true);
            }
          }
        } catch (error) {
          console.error('‚ùå Error parsing WebSocket message:', error, 'Raw data:', event.data);
        }
      };

      // X·ª≠ l√Ω s·ª± ki·ªán ƒë√≥ng k·∫øt n·ªëi
      this.socket.onclose = (event) => {
        console.log('WebSocket disconnected', event.code, event.reason);
        this.connected = false;
        this.connecting = false;
        
        // T·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i sau 3 gi√¢y n·∫øu kh√¥ng ph·∫£i l√† ƒë√≥ng c√≥ ch·ªß √Ω
        if (event.code !== 1000) {
          setTimeout(() => {
            console.log('Trying to reconnect WebSocket...');
            this.init();
          }, 3000);
        }
      };

      // X·ª≠ l√Ω l·ªói
      this.socket.onerror = (error) => {
        console.error('WebSocket error:', error);
        this.connecting = false;
      };
    } catch (error) {
      console.error('Error initializing WebSocket:', error);
      this.connecting = false;
    }
  }

  // ƒê√≥ng k·∫øt n·ªëi WebSocket
  disconnect() {
    if (this.socket && this.connected) {
      this.socket.close(1000, 'User logout'); // 1000 l√† m√£ ƒë√≥ng k·∫øt n·ªëi b√¨nh th∆∞·ªùng
      this.socket = null;
      this.connected = false;
      this.connecting = false;
    }
  }
}

// T·∫°o v√† export instance c·ªßa SocketService
const socketService = new SocketService();
export default socketService; 